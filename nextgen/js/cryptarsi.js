/**
 * Created by delian on 8/30/16.
 */
"use strict";
/*
 * This little module should implement Base64 encoding/decoding with auto detect between nodejs and browser
 */
// <reference path="./typings/index.d.ts" />
var B2A = function (b) {
    return new Buffer(b).toString('base64');
};
if (typeof btoa == 'function')
    B2A = btoa;
var A2B = function (a) {
    return new Buffer(a, 'base64').toString('ascii');
};
if (typeof atob == 'function')
    A2B = atob;
var Base64 = (function () {
    function Base64() {
    }
    Base64.btoa = function (b) {
        return B2A(b);
    };
    Base64.atob = function (a) {
        return A2B(a);
    };
    return Base64;
}());
exports.Base64 = Base64;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var config = require('./config.json');
var Config = (function () {
    function Config() {
    }
    Config.get = function (key) {
        return config[key];
    };
    return Config;
}());
exports.Config = Config;

/**
 * Created by delian on 8/19/16.
 */
/// <reference path="./typings/index.d.ts" />
"use strict";
var gPassword = null;
var gNonce = null;
// TODO: To implement the Nonce
var Crypto = (function () {
    function Crypto(password, nonce) {
        gPassword = password;
    }
    Crypto.prototype.decrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.decrypt(data, password).toString();
    };
    Crypto.prototype.encrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.encrypt(data, password).toString();
    };
    Crypto.prototype.setPassword = function (password) {
        gPassword = password;
    };
    Crypto.prototype.setNonce = function (nonce) {
        gNonce = nonce;
    };
    Crypto.prototype.dhs = function (word) {
        return this.encrypt(word);
    };
    return Crypto;
}());
exports.Crypto = Crypto;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var UriLoad = (function () {
    function UriLoad() {
        this.req = null;
        this.req = new XMLHttpRequest();
    }
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            return cb(null, this.req);
        }
        else {
            return cb(new Error('Problem'), this.req);
        }
    };
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            var resp = this.req.responseXML.documentElement;
            var field = resp.getElementsByTagName("data");
            for (var i = 0; i < field.length; i++) {
                try {
                    var key = field[i].getElementsByTagName("key")[0].textContent;
                    var val = field[i].getElementsByTagName("value")[0].textContent;
                    this.store(key, val);
                }
                catch (e) {
                }
            }
        }
    };
    return UriLoad;
}());
exports.UriLoad = UriLoad;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var WordHash = (function () {
    function WordHash() {
    }
    WordHash.hash = function (word) {
        return word.toLowerCase().match(/^.{2,15}/)[0];
    };
    WordHash.d2h = function (d) {
        return d.toString(16);
    };
    WordHash.h2d = function (h) {
        return parseInt(h, 16);
    };
    WordHash.s2h = function (s) {
        var cr = "";
        for (var i = 0; i < s.length; i++)
            cr = cr + this.d2h(s.charCodeAt(i));
        return cr;
    };
    return WordHash;
}());
exports.WordHash = WordHash;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var UriLoad_1 = require('./UriLoad');
var WordHash_1 = require('./WordHash');
var Crypto_1 = require('./Crypto');
var net = new UriLoad_1.UriLoad();
var crypto = new Crypto_1.Crypto('', ''); // TODO: Password
var Storage = (function () {
    function Storage() {
    }
    Storage.prototype.clear = function () {
        localStorage.clear();
    };
    Storage.prototype.loadFromURI = function (uri) {
        this.clear();
    };
    Storage.prototype.getData = function (key) {
        return localStorage[key];
    };
    Storage.prototype.setData = function (key, val) {
        localStorage[key] = val;
        return val;
    };
    Storage.prototype.lstr = function (x, cb) {
        var my = this;
        if (this.getData(x))
            return true;
        var file = WordHash_1.WordHash.s2h(x);
        var dir = file.substr(-3, 3);
        var fn = "index/" + dir + "/file" + file + ".txt";
        net.get(fn, function (err, req) {
            var z = req.responseText;
            my.setData(x, z.replace(/\<xml\>/, "").replace(/\<\/xml\>/, ""));
            if (my.getData(x))
                return cb(null);
            return cb(new Error());
        });
        return false;
    };
    Storage.prototype.setextr = function (w, cb) {
        var d = crypto.dhs(w + ".idx");
        this.lstr(d, function (err, data) {
            if (err)
                cb(err, []);
            var s = crypto.decrypt(this.getData(d)); // TODO: Storage has to become async
            return cb(null, s.split(","));
        });
    };
    return Storage;
}());
exports.Storage = Storage;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var Crypto_1 = require('./Crypto');
var WordHash_1 = require('./WordHash');
var crypt = new Crypto_1.Crypto('parola', 'nonce'); //TODO: password store
var Search = (function () {
    function Search() {
    }
    Search.prototype.crossset = function (w, s) {
        var a = [];
        for (var i = s.length - 1; i >= 0; i--)
            if (w.indexOf(s[i]) >= 0)
                a.push(s[i]);
        return a;
    };
    Search.prototype.notcrossset = function (w, s) {
        var a = w;
        for (var i = s.length - 1; i >= 0; i--)
            if (a.indexOf(s[i]) >= 0)
                a.splice(a.indexOf(s[i]), 1);
        return a;
    };
    Search.prototype.andNot = function (words, isnt) {
        if (isnt === void 0) { isnt = false; }
        function branchLen(text) {
            var words = text.replace(/^\s+/, "").replace(/\s+$/, "");
            var i;
            var count;
            if (words.charAt(0) != '(')
                return text.length;
            for (i = 1, count = 1; count && i < words.length; i++) {
                count += (words.charAt(i) == '(') ? 1 : 0;
                count -= (words.charAt(i) == ')') ? 1 : 0;
            }
            return i;
        }
        function mixout(a, b) {
            if (typeof a != 'object' || typeof b != 'object' || typeof a.and != 'object' || typeof a.not != 'object' || typeof b.and != 'object' || typeof b.not != 'object')
                return a;
            Object.keys(b.and).forEach(function (n) { a.and[n] = b.and[n]; });
            Object.keys(b.not).forEach(function (n) { a.not[n] = b.not[n]; });
            return a;
        }
        var out;
        var out2;
        if (typeof words != 'string' || words == '')
            return { and: {}, not: {} };
        words = words.replace(/^\s+/, "").replace(/\s+$/, "");
        if (words.length == 0)
            return { and: {}, not: {} };
        //console.log('Words',words);
        if (words.charAt(0) == '(') {
            var blen = branchLen(words);
            var myset = words.substr(0, blen);
            var outset = words.substr(blen);
            myset = myset.replace(/^\(/, "").replace(/\)$/, "");
            out = this.andNot(myset);
            out2 = this.andNot(outset);
            return mixout(isnt ? { and: out.not, not: out.and } : out, out2);
        }
        if (words.charAt(0) == '-') {
            return this.andNot(words.substr(1), isnt ? false : true);
        }
        if (words.charAt(0) == '+')
            return this.andNot(words.substr(1), isnt);
        var x = words.match(/^(\S+)(.+)?$/);
        var y = {};
        if (x == null)
            return { and: {}, not: {} };
        y[x[1]] = 1;
        return mixout(isnt ? { and: {}, not: y } : { and: y, not: {} }, this.andNot(x[2]));
    };
    Search.prototype.coRegexProc = function (words) {
        if (typeof words != 'string' || words == '')
            return [];
        words = words.replace(/^\s+/, "").replace(/\s+$/, []);
        if (words.length == 0)
            return [];
        function regexArray(words) {
            var w = words;
            var pushA = [];
            function splitPush(words, inv) {
                if (inv === void 0) { inv = false; }
                while (words.match(/[\+\-]/)) {
                    words = words.replace(/^\s+/, "").replace(/\s+$/, "");
                    if (!words.match(/^[\+\-]/))
                        words = words.replace(/^(.+?)([\+\-])/, function (m, a, p) {
                            pushA.push({ match: inv ? "-" : "+", string: a });
                            return p;
                        });
                    words = words.replace(/^([\+\-])(\S+)?/, function (m, p, a) {
                        pushA.push({ match: (((inv ? 1 : 0) ^ (p != '-' ? 1 : 0)) ? "+" : "-"), string: a });
                        return "";
                    });
                }
                if (words)
                    pushA.push({ match: (inv ? "-" : "+"), string: words });
            }
            function branches() {
                w = w.replace(/([\+\-]?)\((.+?)\)/g, function (m, p, a) {
                    splitPush(a, p == '-');
                    return "";
                });
            }
            branches();
            splitPush(w);
            pushA.forEach(function (n) { n.string = n.string.replace(/^\s+/, "").replace(/\s+$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, ".*"); n.regex = new RegExp(n.string, "i"); });
            return pushA;
        }
        return regexArray(words);
    };
    Search.prototype.searchRule = function (srch) {
        var out = this.andNot(srch);
        if (Object.keys(out.and).length == 0)
            return [];
        var w = Object.keys(out.and).concat(Object.keys(out.not)).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        var w1 = Object.keys(out.and).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        w.unshift(w.splice(w.indexOf(w1[0]), 1)[0]); // Put the largest AND word at the front
        var myset = setextr(WordHash_1.MyHash.hash(w[0]));
        for (var i = 1; i < w.length && (myset.length >= (w.length - i)); i++)
            myset = (out.and[w[i]]) ? crossset(myset, setextr(myhash(w[i]))) : notcrossset(myset, setextr(myhash(w[i])));
        // Now we have a set with probable matching, lets do the second match
        var outset = [];
        var regArray = this.coRegexProc(srch);
        var fullStrings = srch.match(/([\+\-])?\"(.+?)\"/g);
        if (fullStrings) {
            fullStrings.forEach(function (n) {
                var o = { match: '+', string: '' };
                if (n.match(/^\-/))
                    o.match = '-';
                o.string = n.replace(/^[\+\-]?\"/, "").replace(/\"$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, "[\\s\\!-\\/\\:-\\@\\[-\\]\\'\\{-~]*");
                o.regex = new RegExp(o.string, "i");
                regArray.unshift(o);
            });
        }
        myset.forEach(function (n) {
            var s = trd(n + ".data");
            // Stings match
            for (var i = 0; i < regArray.length; i++) {
                var t = regArray[i].regex.test(s);
                if (t && regArray[i].match == '-')
                    return;
                if ((!t) && regArray[i].match == '+')
                    return;
            }
            outset.push(n);
        });
        return outset;
    };
    return Search;
}());
exports.Search = Search;

/**
 * Created by delian on 8/18/16.
 */

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhc2U2NC50cyIsIkNvbmZpZy50cyIsIkNyeXB0by50cyIsIlVyaUxvYWQudHMiLCJXb3JkSGFzaC50cyIsIlN0b3JhZ2UudHMiLCJTZWFyY2gudHMiLCJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUVIOztHQUVHO0FBRUgsNENBQTRDO0FBRTVDLElBQUksR0FBRyxHQUFHLFVBQVMsQ0FBUTtJQUN2QixNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUNGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLFVBQVUsQ0FBQztJQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFFMUMsSUFBSSxHQUFHLEdBQUcsVUFBUyxDQUFRO0lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQztBQUNGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLFVBQVUsQ0FBQztJQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFFMUM7SUFBQTtJQU9BLENBQUM7SUFOVSxXQUFJLEdBQVgsVUFBWSxDQUFRO1FBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUNNLFdBQUksR0FBWCxVQUFZLENBQVE7UUFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBQ0wsYUFBQztBQUFELENBUEEsQUFPQyxJQUFBO0FBUFksY0FBTSxTQU9sQixDQUFBOztBQzNCRDs7R0FFRzs7QUFRSCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFdEM7SUFDSTtJQUVBLENBQUM7SUFFTSxVQUFHLEdBQVYsVUFBVyxHQUFVO1FB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R0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQzlDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQVEsRUFBQyxDQUFRLElBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUgsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBUSxFQUFDLENBQVEsSUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0NBQXdDO1FBRXBGLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxpQkFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQUUsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0TCxxRUFBcUU7UUFFckUsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDZCxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLEdBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsRUFBQyxxQ0FBcUMsQ0FBQyxDQUFDO2dCQUNySSxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ25DLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDO1FBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBQyxPQUFPLENBQUMsQ0FBQztZQUV2QixlQUFlO1lBR2YsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxRQUFRLENBQUMsTUFBTSxFQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUM7b0JBQUMsTUFBTSxDQUFDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUM7b0JBQUMsTUFBTSxDQUFDO1lBQ2pELENBQUM7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBR0wsYUFBQztBQUFELENBOUpBLEFBOEpDLElBQUE7QUE5SlksY0FBTSxTQThKbEIsQ0FBQTs7QUNuTEQ7O0dBRUciLCJmaWxlIjoiY3J5cHRhcnNpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzMwLzE2LlxuICovXG5cbi8qXG4gKiBUaGlzIGxpdHRsZSBtb2R1bGUgc2hvdWxkIGltcGxlbWVudCBCYXNlNjQgZW5jb2RpbmcvZGVjb2Rpbmcgd2l0aCBhdXRvIGRldGVjdCBiZXR3ZWVuIG5vZGVqcyBhbmQgYnJvd3NlclxuICovXG5cbi8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vdHlwaW5ncy9pbmRleC5kLnRzXCIgLz5cblxudmFyIEIyQSA9IGZ1bmN0aW9uKGI6c3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihiKS50b1N0cmluZygnYmFzZTY0Jyk7XG59O1xuaWYgKHR5cGVvZiBidG9hID09ICdmdW5jdGlvbicpIEIyQSA9IGJ0b2E7XG5cbnZhciBBMkIgPSBmdW5jdGlvbihhOnN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYSwnYmFzZTY0JykudG9TdHJpbmcoJ2FzY2lpJyk7XG59O1xuaWYgKHR5cGVvZiBhdG9iID09ICdmdW5jdGlvbicpIEEyQiA9IGF0b2I7XG5cbmV4cG9ydCBjbGFzcyBCYXNlNjQge1xuICAgIHN0YXRpYyBidG9hKGI6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gQjJBKGIpO1xuICAgIH1cbiAgICBzdGF0aWMgYXRvYihhOnN0cmluZyk6c3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEEyQihhKTtcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzMwLzE2LlxuICovXG5cbmRlY2xhcmUgdmFyIHJlcXVpcmU6IHtcbiAgICA8VD4ocGF0aDogc3RyaW5nKTogVDtcbiAgICAocGF0aHM6IHN0cmluZ1tdLCBjYWxsYmFjazogKC4uLm1vZHVsZXM6IGFueVtdKSA9PiB2b2lkKTogdm9pZDtcbiAgICBlbnN1cmU6IChwYXRoczogc3RyaW5nW10sIGNhbGxiYWNrOiAocmVxdWlyZTogPFQ+KHBhdGg6IHN0cmluZykgPT4gVCkgPT4gdm9pZCkgPT4gdm9pZDtcbn07XG5cbnZhciBjb25maWcgPSByZXF1aXJlKCcuL2NvbmZpZy5qc29uJyk7XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGdldChrZXk6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gY29uZmlnW2tleV07XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzE5LzE2LlxuICovXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL2luZGV4LmQudHNcIiAvPlxuXG52YXIgZ1Bhc3N3b3JkOnN0cmluZyA9IG51bGw7XG52YXIgZ05vbmNlOnN0cmluZyA9IG51bGw7XG5cbi8vIFRPRE86IFRvIGltcGxlbWVudCB0aGUgTm9uY2VcblxuZXhwb3J0IGNsYXNzIENyeXB0byB7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXNzd29yZDogc3RyaW5nLCBub25jZTogc3RyaW5nKSB7XG4gICAgICAgIGdQYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgIH1cblxuICAgIGRlY3J5cHQoZGF0YTogc3RyaW5nLCBwYXNzd29yZDpzdHJpbmcgPSBnUGFzc3dvcmQsIG5vbmNlOnN0cmluZyA9IGdOb25jZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDcnlwdG9KUy5BRVMuZGVjcnlwdChkYXRhLCBwYXNzd29yZCkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBlbmNyeXB0KGRhdGE6IHN0cmluZywgcGFzc3dvcmQ6c3RyaW5nID0gZ1Bhc3N3b3JkLCBub25jZTpzdHJpbmcgPSBnTm9uY2UpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gQ3J5cHRvSlMuQUVTLmVuY3J5cHQoZGF0YSwgcGFzc3dvcmQpLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgc2V0UGFzc3dvcmQocGFzc3dvcmQ6c3RyaW5nKSB7XG4gICAgICAgIGdQYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgIH1cblxuICAgIHNldE5vbmNlKG5vbmNlOnN0cmluZykge1xuICAgICAgICBnTm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICBkaHMod29yZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jcnlwdCh3b3JkKTtcbiAgICB9XG59XG5cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBkZWxpYW4gb24gOC8zMC8xNi5cbiAqL1xuXG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgY2xhc3MgVXJpTG9hZCB7XG4gICAgcmVxOiBYTUxIdHRwUmVxdWVzdCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5yZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG5cbiAgICBnZXQodXJpOnN0cmluZywgY2I6RnVuY3Rpb24pOnZvaWQge1xuICAgICAgICB0aGlzLnJlcS5vcGVuKCdHRVQnLCB1cmksIGZhbHNlKTtcbiAgICAgICAgdGhpcy5yZXEuc2VuZChudWxsKTtcbiAgICAgICAgaWYgKHRoaXMucmVxLnN0YXR1cyA9PSAyMDAgfHwgdGhpcy5yZXEuc3RhdHVzID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBjYihudWxsLHRoaXMucmVxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoJ1Byb2JsZW0nKSx0aGlzLnJlcSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQodXJpOnN0cmluZywgY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMucmVxLm9wZW4oJ0dFVCcsIHVyaSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlcS5zZW5kKG51bGwpO1xuICAgICAgICBpZiAodGhpcy5yZXEuc3RhdHVzID09IDIwMCB8fCB0aGlzLnJlcS5zdGF0dXMgPT0gMCkge1xuICAgICAgICAgICAgdmFyIHJlc3AgPSB0aGlzLnJlcS5yZXNwb25zZVhNTC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgICAgICB2YXIgZmllbGQgPSByZXNwLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGF0YVwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxmaWVsZC5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleTpzdHJpbmcgPSBmaWVsZFtpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImtleVwiKVswXS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbDpzdHJpbmcgPSBmaWVsZFtpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZhbHVlXCIpWzBdLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JlKGtleSx2YWwpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBkZWxpYW4gb24gOC8zMC8xNi5cbiAqL1xuXG5leHBvcnQgY2xhc3MgV29yZEhhc2gge1xuICAgIHN0YXRpYyBoYXNoKHdvcmQ6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gd29yZC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9eLnsyLDE1fS8pWzBdO1xuICAgIH1cblxuICAgIHN0YXRpYyBkMmgoZDpudW1iZXIpOnN0cmluZyB7IC8vIENvbnZlcnQgdG8gSEVYXG4gICAgICAgIHJldHVybiBkLnRvU3RyaW5nKDE2KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaDJkKGg6c3RyaW5nKTpudW1iZXIgeyAvLyBDb252ZXJ0IHRvIE51bVxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaCwxNik7XG4gICAgfVxuXG4gICAgc3RhdGljIHMyaChzOiBzdHJpbmcpOnN0cmluZyB7IC8vIFN0cmluZyB0byBIRVhcbiAgICAgICAgdmFyIGNyOnN0cmluZyA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykgY3IgPSBjciArIHRoaXMuZDJoKHMuY2hhckNvZGVBdChpKSk7XG4gICAgICAgIHJldHVybiBjcjtcbiAgICB9XG5cbn1cbiIsIi8qKlxuICogQ3JlYXRlZCBieSBkZWxpYW4gb24gOC8xOS8xNi5cbiAqL1xuXG5pbXBvcnQge1VyaUxvYWR9IGZyb20gJy4vVXJpTG9hZCc7XG5pbXBvcnQge1dvcmRIYXNofSBmcm9tICcuL1dvcmRIYXNoJztcbmltcG9ydCB7Q3J5cHRvfSBmcm9tICcuL0NyeXB0byc7XG5cbnZhciBuZXQgPSBuZXcgVXJpTG9hZCgpO1xudmFyIGNyeXB0byA9IG5ldyBDcnlwdG8oJycsJycpOyAvLyBUT0RPOiBQYXNzd29yZFxuXG5leHBvcnQgY2xhc3MgU3RvcmFnZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIH1cblxuICAgIGxvYWRGcm9tVVJJKHVyaSkge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgZ2V0RGF0YShrZXk6c3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZVtrZXldO1xuICAgIH1cblxuICAgIHNldERhdGEoa2V5OnN0cmluZywgdmFsOnN0cmluZyk6c3RyaW5nIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlW2tleV09dmFsO1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGxzdHIoeDogc3RyaW5nLCBjYjogRnVuY3Rpb24pOmJvb2xlYW4geyAvLyBUT0RPOiBsc3RyIG11c3QgYmVjb21lIHdpdGggY2FsbGJhY2tcbiAgICAgICAgdmFyIG15ID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuZ2V0RGF0YSh4KSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBmaWxlID0gV29yZEhhc2guczJoKHgpO1xuICAgICAgICB2YXIgZGlyID0gZmlsZS5zdWJzdHIoLTMsIDMpO1xuICAgICAgICB2YXIgZm4gPSBcImluZGV4L1wiICsgZGlyICsgXCIvZmlsZVwiICsgZmlsZSArIFwiLnR4dFwiO1xuICAgICAgICBuZXQuZ2V0KGZuLGZ1bmN0aW9uKGVycixyZXEpIHtcbiAgICAgICAgICAgIHZhciB6ID0gcmVxLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIG15LnNldERhdGEoeCx6LnJlcGxhY2UoL1xcPHhtbFxcPi8sIFwiXCIpLnJlcGxhY2UoL1xcPFxcL3htbFxcPi8sIFwiXCIpKTtcbiAgICAgICAgICAgIGlmIChteS5nZXREYXRhKHgpKSByZXR1cm4gY2IobnVsbCk7XG4gICAgICAgICAgICByZXR1cm4gY2IobmV3IEVycm9yKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHNldGV4dHIodzogc3RyaW5nLCBjYjpGdW5jdGlvbik6dm9pZCB7XG4gICAgICAgIHZhciBkID0gY3J5cHRvLmRocyh3ICsgXCIuaWR4XCIpO1xuICAgICAgICB0aGlzLmxzdHIoZCxmdW5jdGlvbihlcnIsZGF0YSkge1xuICAgICAgICAgICAgaWYgKGVycikgY2IoZXJyLFtdKTtcbiAgICAgICAgICAgIHZhciBzID0gY3J5cHRvLmRlY3J5cHQodGhpcy5nZXREYXRhKGQpKTsgLy8gVE9ETzogU3RvcmFnZSBoYXMgdG8gYmVjb21lIGFzeW5jXG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCxzLnNwbGl0KFwiLFwiKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzE5LzE2LlxuICovXG5cbmltcG9ydCB7Q3J5cHRvfSBmcm9tICcuL0NyeXB0byc7XG5pbXBvcnQge1N0b3JhZ2V9IGZyb20gJy4vU3RvcmFnZSc7XG5pbXBvcnQge015SGFzaH0gZnJvbSAnLi9Xb3JkSGFzaCc7XG5cbnZhciBjcnlwdCA9IG5ldyBDcnlwdG8oJ3Bhcm9sYScsJ25vbmNlJyk7IC8vVE9ETzogcGFzc3dvcmQgc3RvcmVcblxuaW50ZXJmYWNlIElBbmROb3Qge1xuICAgIG5vdDogYW55LFxuICAgIGFuZDogYW55XG59XG5cbmludGVyZmFjZSBJUHVzaEEge1xuICAgIG1hdGNoOiBhbnksXG4gICAgc3RyaW5nOiBzdHJpbmcsXG4gICAgcmVnZXg/OiBhbnlcbn1cblxuZXhwb3J0IGNsYXNzIFNlYXJjaCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9XG5cbiAgICBjcm9zc3NldCh3OiBzdHJpbmdbXSwgczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBhOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpOm51bWJlciA9IHMubGVuZ3RoLTE7IGk+PTA7IGktLSkgaWYgKHcuaW5kZXhPZihzW2ldKT49MCkgYS5wdXNoKHNbaV0pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICBub3Rjcm9zc3NldCh3OiBzdHJpbmdbXSwgczogc3RyaW5nW10pOiBzdHJpbmdbXSB7XG4gICAgICAgIGxldCBhOiBzdHJpbmdbXSA9IHc7XG4gICAgICAgIGZvciAobGV0IGk6bnVtYmVyID0gcy5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIGlmIChhLmluZGV4T2Yoc1tpXSk+PTApIGEuc3BsaWNlKGEuaW5kZXhPZihzW2ldKSwxKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgYW5kTm90KHdvcmRzOiBzdHJpbmcsIGlzbnQ6IGJvb2xlYW4gPSBmYWxzZSk6IElBbmROb3Qge1xuXG4gICAgICAgIGZ1bmN0aW9uIGJyYW5jaExlbih0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICAgICAgdmFyIHdvcmRzOiBzdHJpbmcgPSB0ZXh0LnJlcGxhY2UoL15cXHMrLywgXCJcIikucmVwbGFjZSgvXFxzKyQvLCBcIlwiKTtcbiAgICAgICAgICAgIHZhciBpOiBudW1iZXI7XG4gICAgICAgICAgICB2YXIgY291bnQ6IG51bWJlcjtcblxuICAgICAgICAgICAgaWYgKHdvcmRzLmNoYXJBdCgwKSE9JygnKSByZXR1cm4gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGk9MSxjb3VudD0xOyBjb3VudCYmaTx3b3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvdW50Kz0od29yZHMuY2hhckF0KGkpPT0nKCcpPzE6MDtcbiAgICAgICAgICAgICAgICBjb3VudC09KHdvcmRzLmNoYXJBdChpKT09JyknKT8xOjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1peG91dChhOklBbmROb3QsYjpJQW5kTm90KTpJQW5kTm90IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYS5hbmQgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGEubm90ICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiLmFuZCAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYi5ub3QgIT0gJ29iamVjdCcpIHJldHVybiBhO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoYi5hbmQpLmZvckVhY2goZnVuY3Rpb24obikge2EuYW5kW25dPSBiLmFuZFtuXX0pO1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoYi5ub3QpLmZvckVhY2goZnVuY3Rpb24obikge2Eubm90W25dPSBiLm5vdFtuXX0pO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0OklBbmROb3Q7XG4gICAgICAgIHZhciBvdXQyOklBbmROb3Q7XG4gICAgICAgIGlmICh0eXBlb2Ygd29yZHMgIT0gJ3N0cmluZycgfHwgd29yZHMgPT0gJycpIHJldHVybiB7IGFuZDoge30sIG5vdDoge30gfTtcblxuICAgICAgICB3b3JkcyA9IHdvcmRzLnJlcGxhY2UoL15cXHMrLywgXCJcIikucmVwbGFjZSgvXFxzKyQvLCBcIlwiKTtcbiAgICAgICAgaWYgKHdvcmRzLmxlbmd0aD09MCkgcmV0dXJuIHsgYW5kOiB7fSwgbm90OiB7fSB9O1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdXb3Jkcycsd29yZHMpO1xuXG4gICAgICAgIGlmICh3b3Jkcy5jaGFyQXQoMCkgPT0gJygnKSB7XG4gICAgICAgICAgICB2YXIgYmxlbiA9IGJyYW5jaExlbih3b3Jkcyk7XG4gICAgICAgICAgICB2YXIgbXlzZXQgPSB3b3Jkcy5zdWJzdHIoMCxibGVuKTtcbiAgICAgICAgICAgIHZhciBvdXRzZXQgPSB3b3Jkcy5zdWJzdHIoYmxlbik7XG4gICAgICAgICAgICBteXNldCA9IG15c2V0LnJlcGxhY2UoL15cXCgvLFwiXCIpLnJlcGxhY2UoL1xcKSQvLFwiXCIpO1xuICAgICAgICAgICAgb3V0ID0gdGhpcy5hbmROb3QobXlzZXQpO1xuICAgICAgICAgICAgb3V0MiA9IHRoaXMuYW5kTm90KG91dHNldCk7XG4gICAgICAgICAgICByZXR1cm4gbWl4b3V0KGlzbnQ/eyBhbmQ6IG91dC5ub3QsIG5vdDogb3V0LmFuZCB9Om91dCxvdXQyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3b3Jkcy5jaGFyQXQoMCkgPT0gJy0nKSB7IC8vIEludmVyc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuZE5vdCh3b3Jkcy5zdWJzdHIoMSksaXNudD9mYWxzZTp0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3b3Jkcy5jaGFyQXQoMCkgPT0gJysnKSByZXR1cm4gdGhpcy5hbmROb3Qod29yZHMuc3Vic3RyKDEpLGlzbnQpO1xuXG4gICAgICAgIHZhciB4ID0gd29yZHMubWF0Y2goL14oXFxTKykoLispPyQvKTtcbiAgICAgICAgdmFyIHkgPSB7fTtcbiAgICAgICAgaWYgKHg9PW51bGwpIHJldHVybiB7IGFuZDoge30sIG5vdDoge30gfTtcbiAgICAgICAgeVt4WzFdXT0xO1xuICAgICAgICByZXR1cm4gbWl4b3V0KGlzbnQ/eyBhbmQ6IHt9ICwgbm90OiB5IH06eyBhbmQ6IHksIG5vdDoge30gfSx0aGlzLmFuZE5vdCh4WzJdKSk7XG4gICAgfVxuXG4gICAgY29SZWdleFByb2Mod29yZHM6c3RyaW5nKTpJUHVzaEFbXSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd29yZHMgIT0gJ3N0cmluZycgfHwgd29yZHMgPT0gJycpIHJldHVybiBbXTtcbiAgICAgICAgd29yZHMgPSB3b3Jkcy5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpLnJlcGxhY2UoL1xccyskLywgW10pO1xuICAgICAgICBpZiAod29yZHMubGVuZ3RoPT0wKSByZXR1cm4gW107XG5cbiAgICAgICAgZnVuY3Rpb24gcmVnZXhBcnJheSh3b3JkczpzdHJpbmcpOklQdXNoQVtdIHtcbiAgICAgICAgICAgIHZhciB3OnN0cmluZyA9IHdvcmRzO1xuICAgICAgICAgICAgdmFyIHB1c2hBOklQdXNoQVtdID0gW107XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNwbGl0UHVzaCh3b3JkczpzdHJpbmcsaW52OmJvb2xlYW49ZmFsc2UpOnZvaWQge1xuICAgICAgICAgICAgICAgIHdoaWxlKHdvcmRzLm1hdGNoKC9bXFwrXFwtXS8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmRzID0gd29yZHMucmVwbGFjZSgvXlxccysvLFwiXCIpLnJlcGxhY2UoL1xccyskLyxcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3b3Jkcy5tYXRjaCgvXltcXCtcXC1dLykpIHdvcmRzID0gd29yZHMucmVwbGFjZSgvXiguKz8pKFtcXCtcXC1dKS8sZnVuY3Rpb24obSxhLHApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hBLnB1c2goeyBtYXRjaDogaW52P1wiLVwiOlwiK1wiLCBzdHJpbmc6IGEgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHdvcmRzID0gd29yZHMucmVwbGFjZSgvXihbXFwrXFwtXSkoXFxTKyk/LyxmdW5jdGlvbihtLHAsYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHVzaEEucHVzaCh7IG1hdGNoOiAoKChpbnY/MTowKV4ocCE9Jy0nPzE6MCkpP1wiK1wiOlwiLVwiKSwgc3RyaW5nOiBhfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh3b3JkcykgcHVzaEEucHVzaCh7bWF0Y2g6KGludj9cIi1cIjpcIitcIiksIHN0cmluZzp3b3Jkc30pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBicmFuY2hlcygpIHtcbiAgICAgICAgICAgICAgICB3PXcucmVwbGFjZSgvKFtcXCtcXC1dPylcXCgoLis/KVxcKS9nLGZ1bmN0aW9uKG0scCxhKSB7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0UHVzaChhLHA9PSctJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmFuY2hlcygpO1xuICAgICAgICAgICAgc3BsaXRQdXNoKHcpO1xuXG4gICAgICAgICAgICBwdXNoQS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtuLnN0cmluZyA9IG4uc3RyaW5nLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIikucmVwbGFjZSgvW1xcc1xcIS1cXC9cXDotXFxAXFxbLVxcXVxcJ1xcey1+XSsvZyxcIi4qXCIpO24ucmVnZXggPSBuZXcgUmVnRXhwKG4uc3RyaW5nLFwiaVwiKTsgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBwdXNoQTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleEFycmF5KHdvcmRzKTtcbiAgICB9XG5cbiAgICBzZWFyY2hSdWxlKHNyY2g6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgdmFyIG91dCA9IHRoaXMuYW5kTm90KHNyY2gpO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhvdXQuYW5kKS5sZW5ndGg9PTApIHJldHVybiBbXTtcbiAgICAgICAgdmFyIHcgPSBPYmplY3Qua2V5cyhvdXQuYW5kKS5jb25jYXQoT2JqZWN0LmtleXMob3V0Lm5vdCkpLnNvcnQoKHg6c3RyaW5nLHk6c3RyaW5nKTpudW1iZXI9PnsgcmV0dXJuIHgubGVuZ3RoPD15Lmxlbmd0aD8xOjAgfSk7XG4gICAgICAgIHZhciB3MSA9IE9iamVjdC5rZXlzKG91dC5hbmQpLnNvcnQoKHg6c3RyaW5nLHk6c3RyaW5nKTpudW1iZXI9PnsgcmV0dXJuIHgubGVuZ3RoPD15Lmxlbmd0aD8xOjAgfSk7XG5cbiAgICAgICAgdy51bnNoaWZ0KHcuc3BsaWNlKHcuaW5kZXhPZih3MVswXSksMSlbMF0pOyAvLyBQdXQgdGhlIGxhcmdlc3QgQU5EIHdvcmQgYXQgdGhlIGZyb250XG5cbiAgICAgICAgdmFyIG15c2V0ID0gc2V0ZXh0cihNeUhhc2guaGFzaCh3WzBdKSk7XG4gICAgICAgIGZvciAobGV0IGk6bnVtYmVyID0gMTsgaSA8IHcubGVuZ3RoICAmJiAobXlzZXQubGVuZ3RoID49ICh3Lmxlbmd0aC1pKSk7IGkrKykgbXlzZXQgPSAob3V0LmFuZFt3W2ldXSk/Y3Jvc3NzZXQobXlzZXQsIHNldGV4dHIobXloYXNoKHdbaV0pKSk6bm90Y3Jvc3NzZXQobXlzZXQsIHNldGV4dHIobXloYXNoKHdbaV0pKSk7XG5cbiAgICAgICAgLy8gTm93IHdlIGhhdmUgYSBzZXQgd2l0aCBwcm9iYWJsZSBtYXRjaGluZywgbGV0cyBkbyB0aGUgc2Vjb25kIG1hdGNoXG5cbiAgICAgICAgdmFyIG91dHNldCA9IFtdO1xuICAgICAgICB2YXIgcmVnQXJyYXkgPSB0aGlzLmNvUmVnZXhQcm9jKHNyY2gpO1xuXG4gICAgICAgIHZhciBmdWxsU3RyaW5ncyA9IHNyY2gubWF0Y2goLyhbXFwrXFwtXSk/XFxcIiguKz8pXFxcIi9nKTtcbiAgICAgICAgaWYgKGZ1bGxTdHJpbmdzKSB7XG4gICAgICAgICAgICBmdWxsU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgbzpJUHVzaEEgPSB7IG1hdGNoOiAnKycsIHN0cmluZzogJycgfTtcbiAgICAgICAgICAgICAgICBpZiAobi5tYXRjaCgvXlxcLS8pKSBvLm1hdGNoID0gJy0nO1xuICAgICAgICAgICAgICAgIG8uc3RyaW5nID0gbi5yZXBsYWNlKC9eW1xcK1xcLV0/XFxcIi8sXCJcIikucmVwbGFjZSgvXFxcIiQvLFwiXCIpLnJlcGxhY2UoL1tcXHNcXCEtXFwvXFw6LVxcQFxcWy1cXF1cXCdcXHstfl0rL2csXCJbXFxcXHNcXFxcIS1cXFxcL1xcXFw6LVxcXFxAXFxcXFstXFxcXF1cXFxcJ1xcXFx7LX5dKlwiKTtcbiAgICAgICAgICAgICAgICBvLnJlZ2V4ID0gbmV3IFJlZ0V4cChvLnN0cmluZyxcImlcIik7XG4gICAgICAgICAgICAgICAgcmVnQXJyYXkudW5zaGlmdChvKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBteXNldC5mb3JFYWNoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHZhciBzID0gdHJkKG4rXCIuZGF0YVwiKTtcblxuICAgICAgICAgICAgLy8gU3RpbmdzIG1hdGNoXG5cblxuICAgICAgICAgICAgZm9yICh2YXIgaT0wO2k8cmVnQXJyYXkubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgIHZhciB0ID0gcmVnQXJyYXlbaV0ucmVnZXgudGVzdChzKTtcbiAgICAgICAgICAgICAgICBpZiAodCAmJiByZWdBcnJheVtpXS5tYXRjaCA9PSAnLScpIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZiAoKCF0KSAmJiByZWdBcnJheVtpXS5tYXRjaCA9PSAnKycpIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHNldC5wdXNoKG4pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gb3V0c2V0O1xuICAgIH1cblxuXG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzE4LzE2LlxuICovXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

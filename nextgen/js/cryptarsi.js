/**
 * Created by delian on 8/30/16.
 */
"use strict";
/*
 * This little module should implement Base64 encoding/decoding with auto detect between nodejs and browser
 */
// <reference path="./typings/index.d.ts" />
var B2A = function (b) {
    return new Buffer(b).toString('base64');
};
if (typeof btoa == 'function')
    B2A = btoa;
var A2B = function (a) {
    return new Buffer(a, 'base64').toString('ascii');
};
if (typeof atob == 'function')
    A2B = atob;
var Base64 = (function () {
    function Base64() {
    }
    Base64.btoa = function (b) {
        return B2A(b);
    };
    Base64.atob = function (a) {
        return A2B(a);
    };
    return Base64;
}());
exports.Base64 = Base64;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var config = require('./config.json');
var Config = (function () {
    function Config() {
    }
    Config.get = function (key) {
        return config[key];
    };
    return Config;
}());
exports.Config = Config;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var WordHash = (function () {
    function WordHash() {
    }
    WordHash.hash = function (word) {
        return word.toLowerCase().match(/^.{2,15}/)[0];
    };
    WordHash.d2h = function (d) {
        return d.toString(16);
    };
    WordHash.h2d = function (h) {
        return parseInt(h, 16);
    };
    WordHash.s2h = function (s) {
        var cr = "";
        for (var i = 0; i < s.length; i++)
            cr = cr + this.d2h(s.charCodeAt(i));
        return cr;
    };
    return WordHash;
}());
exports.WordHash = WordHash;

/**
 * Created by delian on 8/19/16.
 */
/// <reference path="./typings/index.d.ts" />
"use strict";
var WordHash_1 = require("./WordHash");
var gPassword = null;
var gNonce = null;
// TODO: To implement the Nonce
var Crypto = (function () {
    function Crypto(password, nonce) {
        gPassword = password;
    }
    Crypto.prototype.hash = function (word) {
        return WordHash_1.WordHash.hash(word);
    };
    Crypto.prototype.decrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.decrypt(data, password).toString();
    };
    Crypto.prototype.encrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.encrypt(data, password).toString();
    };
    Crypto.prototype.setPassword = function (password) {
        gPassword = password;
    };
    Crypto.prototype.setNonce = function (nonce) {
        gNonce = nonce;
    };
    Crypto.prototype.dhs = function (word) {
        return this.encrypt(word);
    };
    return Crypto;
}());
exports.Crypto = Crypto;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var es6_promise_1 = require('es6-promise');
var UriLoad = (function () {
    function UriLoad() {
        this.req = null;
        this.req = new XMLHttpRequest();
    }
    UriLoad.prototype.get = function (uri) {
        var me = this;
        return new es6_promise_1.Promise(function (resolve, reject) {
            me.req.open('GET', uri, true);
            me.req.onload = function (e) {
                if (me.req.readyState == 4) {
                    if (me.req.status == 200 || me.req.status == 201 || me.req.status == 0) {
                        resolve(me.req);
                    }
                }
            };
            me.req.onerror = function (e) {
                reject(me.req);
            };
            me.req.send(null);
        });
    };
    return UriLoad;
}());
exports.UriLoad = UriLoad;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
/// <reference path="./typings/index.d.ts" />
var UriLoad_1 = require('./UriLoad');
var WordHash_1 = require('./WordHash');
var Crypto_1 = require('./Crypto');
var es6_promise_1 = require('es6-promise');
var Storage = (function () {
    function Storage() {
        this.net = new UriLoad_1.UriLoad();
        this.crypto = new Crypto_1.Crypto('', ''); // TODO: Fix the password
    }
    Storage.prototype.clear = function () {
        localStorage.clear();
    };
    Storage.prototype.loadFromURI = function (uri) {
        this.clear();
    };
    Storage.prototype.getDataLS = function (key) {
        return localStorage[key];
    };
    Storage.prototype.setDataLS = function (key, val) {
        localStorage[key] = val;
        return val;
    };
    Storage.prototype.getData = function (key) {
        var me = this;
        return new es6_promise_1.Promise(function (resolve, reject) {
            resolve(me.getDataLS(key));
        });
    };
    Storage.prototype.setData = function (key, val) {
        var me = this;
        return new es6_promise_1.Promise(function (resolve, reject) {
            resolve(me.setDataLS(key, val));
        });
    };
    Storage.prototype.lstr = function (x, cb) {
        var my = this;
        if (this.getData(x))
            return true;
        var file = WordHash_1.WordHash.s2h(x);
        var dir = file.substr(-3, 3);
        var fn = "index/" + dir + "/file" + file + ".txt";
        net.get(fn, function (err, req) {
            var z = req.responseText;
            my.setData(x, z.replace(/\<xml\>/, "").replace(/\<\/xml\>/, ""));
            if (my.getData(x))
                return cb(null);
            return cb(new Error());
        });
        return false;
    };
    Storage.prototype.setextr = function (w, cb) {
        var d = crypto.dhs(w + ".idx");
        this.lstr(d, function (err, data) {
            if (err)
                cb(err, []);
            var s = crypto.decrypt(this.getData(d)); // TODO: Storage has to become async
            return cb(null, s.split(","));
        });
    };
    return Storage;
}());
exports.Storage = Storage;

/**
 * Created by delian on 10/2/16.
 */
"use strict";
/// <reference path="./typings/index.d.ts" />
/*
This class has a goal to load the database in the storage
 */
// TODO: make the code more sequential with Promises. Could use Promises.all
var UriLoad_1 = require('./UriLoad');
var Storage_1 = require('./Storage');
var es6_promise_1 = require('es6-promise');
var LoadDB = (function () {
    function LoadDB() {
        this.uriReq = new UriLoad_1.UriLoad();
        this.storage = new Storage_1.Storage();
    }
    /**
     * Loads data from a predefined URL and stores it in the storage
     * @param uri
     * @returns {"es6-promise".Promise}
     */
    LoadDB.prototype.load = function (uri) {
        var me = this;
        return new es6_promise_1.Promise(function (resolve, reject) {
            me.uriReq.get(uri).then(function (req) {
                var resp = req.responseXML.documentElement;
                var field = resp.getElementsByTagName("data");
                for (var i = 0; i < field.length; i++) {
                    try {
                        var key = field[i].getElementsByTagName("key")[0].textContent;
                        var val = field[i].getElementsByTagName("value")[0].textContent;
                        me.storage.setData(key, val).catch(reject); // No problem it could execute out of order
                    }
                    catch (e) { }
                }
                return resolve();
            }).catch(reject);
        });
    };
    return LoadDB;
}());

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var Crypto_1 = require('./Crypto');
var Storage_1 = require('./Storage');
var WordHash_1 = require('./WordHash');
var crypt = new Crypto_1.Crypto('parola', 'nonce'); //TODO: password store
var storage = new Storage_1.Storage();
var Search = (function () {
    function Search() {
    }
    Search.prototype.crossset = function (w, s) {
        var a = [];
        for (var i = s.length - 1; i >= 0; i--)
            if (w.indexOf(s[i]) >= 0)
                a.push(s[i]);
        return a;
    };
    Search.prototype.notcrossset = function (w, s) {
        var a = w;
        for (var i = s.length - 1; i >= 0; i--)
            if (a.indexOf(s[i]) >= 0)
                a.splice(a.indexOf(s[i]), 1);
        return a;
    };
    Search.prototype.andNot = function (words, isnt) {
        if (isnt === void 0) { isnt = false; }
        function branchLen(text) {
            var words = text.replace(/^\s+/, "").replace(/\s+$/, "");
            var i;
            var count;
            if (words.charAt(0) != '(')
                return text.length;
            for (i = 1, count = 1; count && i < words.length; i++) {
                count += (words.charAt(i) == '(') ? 1 : 0;
                count -= (words.charAt(i) == ')') ? 1 : 0;
            }
            return i;
        }
        function mixout(a, b) {
            if (typeof a != 'object' || typeof b != 'object' || typeof a.and != 'object' || typeof a.not != 'object' || typeof b.and != 'object' || typeof b.not != 'object')
                return a;
            Object.keys(b.and).forEach(function (n) { a.and[n] = b.and[n]; });
            Object.keys(b.not).forEach(function (n) { a.not[n] = b.not[n]; });
            return a;
        }
        var out;
        var out2;
        if (typeof words != 'string' || words == '')
            return { and: {}, not: {} };
        words = words.replace(/^\s+/, "").replace(/\s+$/, "");
        if (words.length == 0)
            return { and: {}, not: {} };
        //console.log('Words',words);
        if (words.charAt(0) == '(') {
            var blen = branchLen(words);
            var myset = words.substr(0, blen);
            var outset = words.substr(blen);
            myset = myset.replace(/^\(/, "").replace(/\)$/, "");
            out = this.andNot(myset);
            out2 = this.andNot(outset);
            return mixout(isnt ? { and: out.not, not: out.and } : out, out2);
        }
        if (words.charAt(0) == '-') {
            return this.andNot(words.substr(1), isnt ? false : true);
        }
        if (words.charAt(0) == '+')
            return this.andNot(words.substr(1), isnt);
        var x = words.match(/^(\S+)(.+)?$/);
        var y = {};
        if (x == null)
            return { and: {}, not: {} };
        y[x[1]] = 1;
        return mixout(isnt ? { and: {}, not: y } : { and: y, not: {} }, this.andNot(x[2]));
    };
    Search.prototype.coRegexProc = function (words) {
        if (typeof words != 'string' || words == '')
            return [];
        words = words.replace(/^\s+/, "").replace(/\s+$/, []);
        if (words.length == 0)
            return [];
        function regexArray(words) {
            var w = words;
            var pushA = [];
            function splitPush(words, inv) {
                if (inv === void 0) { inv = false; }
                while (words.match(/[\+\-]/)) {
                    words = words.replace(/^\s+/, "").replace(/\s+$/, "");
                    if (!words.match(/^[\+\-]/))
                        words = words.replace(/^(.+?)([\+\-])/, function (m, a, p) {
                            pushA.push({ match: inv ? "-" : "+", string: a });
                            return p;
                        });
                    words = words.replace(/^([\+\-])(\S+)?/, function (m, p, a) {
                        pushA.push({ match: (((inv ? 1 : 0) ^ (p != '-' ? 1 : 0)) ? "+" : "-"), string: a });
                        return "";
                    });
                }
                if (words)
                    pushA.push({ match: (inv ? "-" : "+"), string: words });
            }
            function branches() {
                w = w.replace(/([\+\-]?)\((.+?)\)/g, function (m, p, a) {
                    splitPush(a, p == '-');
                    return "";
                });
            }
            branches();
            splitPush(w);
            pushA.forEach(function (n) { n.string = n.string.replace(/^\s+/, "").replace(/\s+$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, ".*"); n.regex = new RegExp(n.string, "i"); });
            return pushA;
        }
        return regexArray(words);
    };
    Search.prototype.searchRule = function (srch) {
        var out = this.andNot(srch);
        if (Object.keys(out.and).length == 0)
            return [];
        var w = Object.keys(out.and).concat(Object.keys(out.not)).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        var w1 = Object.keys(out.and).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        w.unshift(w.splice(w.indexOf(w1[0]), 1)[0]); // Put the largest AND word at the front
        var myset = storage.setextr(WordHash_1.WordHash.hash(w[0]), function () {
        });
        for (var i = 1; i < w.length && (myset.length >= (w.length - i)); i++)
            myset = (out.and[w[i]]) ? crossset(myset, setextr(myhash(w[i]))) : notcrossset(myset, setextr(myhash(w[i])));
        // Now we have a set with probable matching, lets do the second match
        var outset = [];
        var regArray = this.coRegexProc(srch);
        var fullStrings = srch.match(/([\+\-])?\"(.+?)\"/g);
        if (fullStrings) {
            fullStrings.forEach(function (n) {
                var o = { match: '+', string: '' };
                if (n.match(/^\-/))
                    o.match = '-';
                o.string = n.replace(/^[\+\-]?\"/, "").replace(/\"$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, "[\\s\\!-\\/\\:-\\@\\[-\\]\\'\\{-~]*");
                o.regex = new RegExp(o.string, "i");
                regArray.unshift(o);
            });
        }
        myset.forEach(function (n) {
            var s = trd(n + ".data");
            // Stings match
            for (var i = 0; i < regArray.length; i++) {
                var t = regArray[i].regex.test(s);
                if (t && regArray[i].match == '-')
                    return;
                if ((!t) && regArray[i].match == '+')
                    return;
            }
            outset.push(n);
        });
        return outset;
    };
    return Search;
}());
exports.Search = Search;

/**
 * Created by delian on 8/18/16.
 */

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * Created by delian on 8/30/16.
 */
"use strict";
/*
 * This little module should implement Base64 encoding/decoding with auto detect between nodejs and browser
 */
// <reference path="./typings/index.d.ts" />
var B2A = function (b) {
    return new Buffer(b).toString('base64');
};
if (typeof btoa == 'function')
    B2A = btoa;
var A2B = function (a) {
    return new Buffer(a, 'base64').toString('ascii');
};
if (typeof atob == 'function')
    A2B = atob;
var Base64 = (function () {
    function Base64() {
    }
    Base64.btoa = function (b) {
        return B2A(b);
    };
    Base64.atob = function (a) {
        return A2B(a);
    };
    return Base64;
}());
exports.Base64 = Base64;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var config = require('./config.json');
var Config = (function () {
    function Config() {
    }
    Config.get = function (key) {
        return config[key];
    };
    return Config;
}());
exports.Config = Config;

/**
 * Created by delian on 8/19/16.
 */
/// <reference path="./typings/index.d.ts" />
"use strict";
var gPassword = null;
var gNonce = null;
// TODO: To implement the Nonce
var Crypto = (function () {
    function Crypto(password, nonce) {
        gPassword = password;
    }
    Crypto.prototype.decrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.decrypt(data, password).toString();
    };
    Crypto.prototype.encrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.encrypt(data, password).toString();
    };
    Crypto.prototype.setPassword = function (password) {
        gPassword = password;
    };
    Crypto.prototype.setNonce = function (nonce) {
        gNonce = nonce;
    };
    Crypto.prototype.dhs = function (word) {
        return this.encrypt(word);
    };
    return Crypto;
}());
exports.Crypto = Crypto;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var UriLoad = (function () {
    function UriLoad() {
        this.req = null;
        this.req = new XMLHttpRequest();
    }
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            return cb(null, this.req);
        }
        else {
            return cb(new Error('Problem'), this.req);
        }
    };
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            var resp = this.req.responseXML.documentElement;
            var field = resp.getElementsByTagName("data");
            for (var i = 0; i < field.length; i++) {
                try {
                    var key = field[i].getElementsByTagName("key")[0].textContent;
                    var val = field[i].getElementsByTagName("value")[0].textContent;
                    this.store(key, val);
                }
                catch (e) {
                }
            }
        }
    };
    return UriLoad;
}());
exports.UriLoad = UriLoad;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var WordHash = (function () {
    function WordHash() {
    }
    WordHash.hash = function (word) {
        return word.toLowerCase().match(/^.{2,15}/)[0];
    };
    WordHash.d2h = function (d) {
        return d.toString(16);
    };
    WordHash.h2d = function (h) {
        return parseInt(h, 16);
    };
    WordHash.s2h = function (s) {
        var cr = "";
        for (var i = 0; i < s.length; i++)
            cr = cr + this.d2h(s.charCodeAt(i));
        return cr;
    };
    return WordHash;
}());
exports.WordHash = WordHash;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var UriLoad_1 = require('./UriLoad');
var WordHash_1 = require('./WordHash');
var Crypto_1 = require('./Crypto');
var net = new UriLoad_1.UriLoad();
var crypto = new Crypto_1.Crypto('', ''); // TODO: Password
var Storage = (function () {
    function Storage() {
    }
    Storage.prototype.clear = function () {
        localStorage.clear();
    };
    Storage.prototype.loadFromURI = function (uri) {
        this.clear();
    };
    Storage.prototype.getData = function (key) {
        return localStorage[key];
    };
    Storage.prototype.setData = function (key, val) {
        localStorage[key] = val;
        return val;
    };
    Storage.prototype.lstr = function (x, cb) {
        var my = this;
        if (this.getData(x))
            return true;
        var file = WordHash_1.WordHash.s2h(x);
        var dir = file.substr(-3, 3);
        var fn = "index/" + dir + "/file" + file + ".txt";
        net.get(fn, function (err, req) {
            var z = req.responseText;
            my.setData(x, z.replace(/\<xml\>/, "").replace(/\<\/xml\>/, ""));
            if (my.getData(x))
                return cb(null);
            return cb(new Error());
        });
        return false;
    };
    Storage.prototype.setextr = function (w, cb) {
        var d = crypto.dhs(w + ".idx");
        this.lstr(d, function (err, data) {
            if (err)
                cb(err, []);
            var s = crypto.decrypt(this.getData(d)); // TODO: Storage has to become async
            return cb(null, s.split(","));
        });
    };
    return Storage;
}());
exports.Storage = Storage;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var Crypto_1 = require('./Crypto');
var Storage_1 = require('./Storage');
var WordHash_1 = require('./WordHash');
var crypt = new Crypto_1.Crypto('parola', 'nonce'); //TODO: password store
var storage = new Storage_1.Storage();
var Search = (function () {
    function Search() {
    }
    Search.prototype.crossset = function (w, s) {
        var a = [];
        for (var i = s.length - 1; i >= 0; i--)
            if (w.indexOf(s[i]) >= 0)
                a.push(s[i]);
        return a;
    };
    Search.prototype.notcrossset = function (w, s) {
        var a = w;
        for (var i = s.length - 1; i >= 0; i--)
            if (a.indexOf(s[i]) >= 0)
                a.splice(a.indexOf(s[i]), 1);
        return a;
    };
    Search.prototype.andNot = function (words, isnt) {
        if (isnt === void 0) { isnt = false; }
        function branchLen(text) {
            var words = text.replace(/^\s+/, "").replace(/\s+$/, "");
            var i;
            var count;
            if (words.charAt(0) != '(')
                return text.length;
            for (i = 1, count = 1; count && i < words.length; i++) {
                count += (words.charAt(i) == '(') ? 1 : 0;
                count -= (words.charAt(i) == ')') ? 1 : 0;
            }
            return i;
        }
        function mixout(a, b) {
            if (typeof a != 'object' || typeof b != 'object' || typeof a.and != 'object' || typeof a.not != 'object' || typeof b.and != 'object' || typeof b.not != 'object')
                return a;
            Object.keys(b.and).forEach(function (n) { a.and[n] = b.and[n]; });
            Object.keys(b.not).forEach(function (n) { a.not[n] = b.not[n]; });
            return a;
        }
        var out;
        var out2;
        if (typeof words != 'string' || words == '')
            return { and: {}, not: {} };
        words = words.replace(/^\s+/, "").replace(/\s+$/, "");
        if (words.length == 0)
            return { and: {}, not: {} };
        //console.log('Words',words);
        if (words.charAt(0) == '(') {
            var blen = branchLen(words);
            var myset = words.substr(0, blen);
            var outset = words.substr(blen);
            myset = myset.replace(/^\(/, "").replace(/\)$/, "");
            out = this.andNot(myset);
            out2 = this.andNot(outset);
            return mixout(isnt ? { and: out.not, not: out.and } : out, out2);
        }
        if (words.charAt(0) == '-') {
            return this.andNot(words.substr(1), isnt ? false : true);
        }
        if (words.charAt(0) == '+')
            return this.andNot(words.substr(1), isnt);
        var x = words.match(/^(\S+)(.+)?$/);
        var y = {};
        if (x == null)
            return { and: {}, not: {} };
        y[x[1]] = 1;
        return mixout(isnt ? { and: {}, not: y } : { and: y, not: {} }, this.andNot(x[2]));
    };
    Search.prototype.coRegexProc = function (words) {
        if (typeof words != 'string' || words == '')
            return [];
        words = words.replace(/^\s+/, "").replace(/\s+$/, []);
        if (words.length == 0)
            return [];
        function regexArray(words) {
            var w = words;
            var pushA = [];
            function splitPush(words, inv) {
                if (inv === void 0) { inv = false; }
                while (words.match(/[\+\-]/)) {
                    words = words.replace(/^\s+/, "").replace(/\s+$/, "");
                    if (!words.match(/^[\+\-]/))
                        words = words.replace(/^(.+?)([\+\-])/, function (m, a, p) {
                            pushA.push({ match: inv ? "-" : "+", string: a });
                            return p;
                        });
                    words = words.replace(/^([\+\-])(\S+)?/, function (m, p, a) {
                        pushA.push({ match: (((inv ? 1 : 0) ^ (p != '-' ? 1 : 0)) ? "+" : "-"), string: a });
                        return "";
                    });
                }
                if (words)
                    pushA.push({ match: (inv ? "-" : "+"), string: words });
            }
            function branches() {
                w = w.replace(/([\+\-]?)\((.+?)\)/g, function (m, p, a) {
                    splitPush(a, p == '-');
                    return "";
                });
            }
            branches();
            splitPush(w);
            pushA.forEach(function (n) { n.string = n.string.replace(/^\s+/, "").replace(/\s+$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, ".*"); n.regex = new RegExp(n.string, "i"); });
            return pushA;
        }
        return regexArray(words);
    };
    Search.prototype.searchRule = function (srch) {
        var out = this.andNot(srch);
        if (Object.keys(out.and).length == 0)
            return [];
        var w = Object.keys(out.and).concat(Object.keys(out.not)).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        var w1 = Object.keys(out.and).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        w.unshift(w.splice(w.indexOf(w1[0]), 1)[0]); // Put the largest AND word at the front
        var myset = storage.setextr(WordHash_1.WordHash.hash(w[0]), function () {
        });
        for (var i = 1; i < w.length && (myset.length >= (w.length - i)); i++)
            myset = (out.and[w[i]]) ? crossset(myset, setextr(myhash(w[i]))) : notcrossset(myset, setextr(myhash(w[i])));
        // Now we have a set with probable matching, lets do the second match
        var outset = [];
        var regArray = this.coRegexProc(srch);
        var fullStrings = srch.match(/([\+\-])?\"(.+?)\"/g);
        if (fullStrings) {
            fullStrings.forEach(function (n) {
                var o = { match: '+', string: '' };
                if (n.match(/^\-/))
                    o.match = '-';
                o.string = n.replace(/^[\+\-]?\"/, "").replace(/\"$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, "[\\s\\!-\\/\\:-\\@\\[-\\]\\'\\{-~]*");
                o.regex = new RegExp(o.string, "i");
                regArray.unshift(o);
            });
        }
        myset.forEach(function (n) {
            var s = trd(n + ".data");
            // Stings match
            for (var i = 0; i < regArray.length; i++) {
                var t = regArray[i].regex.test(s);
                if (t && regArray[i].match == '-')
                    return;
                if ((!t) && regArray[i].match == '+')
                    return;
            }
            outset.push(n);
        });
        return outset;
    };
    return Search;
}());
exports.Search = Search;

/**
 * Created by delian on 8/18/16.
 */

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhc2U2NC50cyIsIkNvbmZpZy50cyIsIkNyeXB0by50cyIsIlVyaUxvYWQudHMiLCJXb3JkSGFzaC50cyIsIlN0b3JhZ2UudHMiLCJTZWFyY2gudHMiLCJtYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHOztBQUVIOztHQUVHO0FBRUgsNENBQTRDO0FBRTVDLElBQUksR0FBRyxHQUFHLFVBQVMsQ0FBUTtJQUN2QixNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUNGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLFVBQVUsQ0FBQztJQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFFMUMsSUFBSSxHQUFHLEdBQUcsVUFBUyxDQUFRO0lBQ3ZCLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQztBQUNGLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxJQUFJLFVBQVUsQ0FBQztJQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFFMUM7SUFBQTtJQU9BLENBQUM7SUFOVSxXQUFJLEdBQVgsVUFBWSxDQUFRO1FBQ2hCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUNNLFdBQUksR0FBWCxVQUFZLENBQVE7UUFDaEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBQ0wsYUFBQztBQUFELENBUEEsQUFPQyxJQUFBO0FBUFksY0FBTSxTQU9sQixDQUFBOztBQzNCRDs7R0FFRzs7QUFRSCxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFdEM7SUFDSTtJQUVBLENBQUM7SUFFTSxVQUFHLEdBQVYsVUFBVyxHQUFVO1FB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QUFNLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksR0FBQyxLQUFLLEdBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEQsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUVyRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNYLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBRSxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsNEJBQVcsR0FBWCxVQUFZLEtBQVk7UUFDcEIsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLEtBQUssSUFBSSxFQUFFLENBQUM7WUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3ZELEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUUvQixvQkFBb0IsS0FBWTtZQUM1QixJQUFJLENBQUMsR0FBVSxLQUFLLENBQUM7WUFDckIsSUFBSSxLQUFLLEdBQVksRUFBRSxDQUFDO1lBRXhCLG1CQUFtQixLQUFZLEVBQUMsR0FBaUI7Z0JBQWpCLG1CQUFpQixHQUFqQixXQUFpQjtnQkFDN0MsT0FBTSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7b0JBQzFCLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNwRCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7NEJBQzlFLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxHQUFDLEdBQUcsR0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7NEJBQzlDLE1BQU0sQ0FBQyxDQUFDLENBQUM7d0JBQ2IsQ0FBQyxDQUFDLENBQUM7b0JBQ0gsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUMsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUM7d0JBQ2xELEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBRSxHQUFHLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO3dCQUNwRSxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUM7Z0JBQ0QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO29CQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxHQUFHLEdBQUMsR0FBRyxHQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO1lBQy9ELENBQUM7WUFFRDtnQkFDSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBQyxVQUFTLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQztvQkFDNUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLElBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3BCLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1lBRUQsUUFBUSxFQUFFLENBQUM7WUFDWCxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFYixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQyxJQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFeEssTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDO1FBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsMkJBQVUsR0FBVixVQUFXLElBQVk7UUFDbkIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUM5QyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFRLEVBQUMsQ0FBUSxJQUFZLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlILElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQVEsRUFBQyxDQUFRLElBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbEcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdDQUF3QztRQUVwRixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1FBRWhELENBQUMsQ0FBQyxDQUFDO1FBQ0gsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXRMLHFFQUFxRTtRQUVyRSxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV0QyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDcEQsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNkLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBUyxDQUFDO2dCQUMxQixJQUFJLENBQUMsR0FBVSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFDLHFDQUFxQyxDQUFDLENBQUM7Z0JBQ3JJLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7UUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVMsQ0FBQztZQUNwQixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXZCLGVBQWU7WUFHZixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztvQkFBQyxNQUFNLENBQUM7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztvQkFBQyxNQUFNLENBQUM7WUFDakQsQ0FBQztZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFHTCxhQUFDO0FBQUQsQ0FoS0EsQUFnS0MsSUFBQTtBQWhLWSxjQUFNLFNBZ0tsQixDQUFBOztBQ3RMRDs7R0FFRyIsImZpbGUiOiJjcnlwdGFyc2kuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgZGVsaWFuIG9uIDgvMzAvMTYuXG4gKi9cblxuLypcbiAqIFRoaXMgbGl0dGxlIG1vZHVsZSBzaG91bGQgaW1wbGVtZW50IEJhc2U2NCBlbmNvZGluZy9kZWNvZGluZyB3aXRoIGF1dG8gZGV0ZWN0IGJldHdlZW4gbm9kZWpzIGFuZCBicm93c2VyXG4gKi9cblxuLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL2luZGV4LmQudHNcIiAvPlxuXG52YXIgQjJBID0gZnVuY3Rpb24oYjpzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbn07XG5pZiAodHlwZW9mIGJ0b2EgPT0gJ2Z1bmN0aW9uJykgQjJBID0gYnRvYTtcblxudmFyIEEyQiA9IGZ1bmN0aW9uKGE6c3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhLCdiYXNlNjQnKS50b1N0cmluZygnYXNjaWknKTtcbn07XG5pZiAodHlwZW9mIGF0b2IgPT0gJ2Z1bmN0aW9uJykgQTJCID0gYXRvYjtcblxuZXhwb3J0IGNsYXNzIEJhc2U2NCB7XG4gICAgc3RhdGljIGJ0b2EoYjpzdHJpbmcpOnN0cmluZyB7XG4gICAgICAgIHJldHVybiBCMkEoYik7XG4gICAgfVxuICAgIHN0YXRpYyBhdG9iKGE6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gQTJCKGEpO1xuICAgIH1cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkgZGVsaWFuIG9uIDgvMzAvMTYuXG4gKi9cblxuZGVjbGFyZSB2YXIgcmVxdWlyZToge1xuICAgIDxUPihwYXRoOiBzdHJpbmcpOiBUO1xuICAgIChwYXRoczogc3RyaW5nW10sIGNhbGxiYWNrOiAoLi4ubW9kdWxlczogYW55W10pID0+IHZvaWQpOiB2b2lkO1xuICAgIGVuc3VyZTogKHBhdGhzOiBzdHJpbmdbXSwgY2FsbGJhY2s6IChyZXF1aXJlOiA8VD4ocGF0aDogc3RyaW5nKSA9PiBUKSA9PiB2b2lkKSA9PiB2b2lkO1xufTtcblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnLmpzb24nKTtcblxuZXhwb3J0IGNsYXNzIENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0KGtleTpzdHJpbmcpOnN0cmluZyB7XG4gICAgICAgIHJldHVybiBjb25maWdba2V5XTtcbiAgICB9XG59XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgZGVsaWFuIG9uIDgvMTkvMTYuXG4gKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvaW5kZXguZC50c1wiIC8+XG5cbnZhciBnUGFzc3dvcmQ6c3RyaW5nID0gbnVsbDtcbnZhciBnTm9uY2U6c3RyaW5nID0gbnVsbDtcblxuLy8gVE9ETzogVG8gaW1wbGVtZW50IHRoZSBOb25jZVxuXG5leHBvcnQgY2xhc3MgQ3J5cHRvIHtcblxuICAgIGNvbnN0cnVjdG9yKHBhc3N3b3JkOiBzdHJpbmcsIG5vbmNlOiBzdHJpbmcpIHtcbiAgICAgICAgZ1Bhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgZGVjcnlwdChkYXRhOiBzdHJpbmcsIHBhc3N3b3JkOnN0cmluZyA9IGdQYXNzd29yZCwgbm9uY2U6c3RyaW5nID0gZ05vbmNlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIENyeXB0b0pTLkFFUy5kZWNyeXB0KGRhdGEsIHBhc3N3b3JkKS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGVuY3J5cHQoZGF0YTogc3RyaW5nLCBwYXNzd29yZDpzdHJpbmcgPSBnUGFzc3dvcmQsIG5vbmNlOnN0cmluZyA9IGdOb25jZSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDcnlwdG9KUy5BRVMuZW5jcnlwdChkYXRhLCBwYXNzd29yZCkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBzZXRQYXNzd29yZChwYXNzd29yZDpzdHJpbmcpIHtcbiAgICAgICAgZ1Bhc3N3b3JkID0gcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgc2V0Tm9uY2Uobm9uY2U6c3RyaW5nKSB7XG4gICAgICAgIGdOb25jZSA9IG5vbmNlO1xuICAgIH1cblxuICAgIGRocyh3b3JkOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNyeXB0KHdvcmQpO1xuICAgIH1cbn1cblxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzMwLzE2LlxuICovXG5cbmltcG9ydCB7Q29uZmlnfSBmcm9tICcuL0NvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBVcmlMb2FkIHtcbiAgICByZXE6IFhNTEh0dHBSZXF1ZXN0ID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIH1cblxuICAgIGdldCh1cmk6c3RyaW5nLCBjYjpGdW5jdGlvbik6dm9pZCB7XG4gICAgICAgIHRoaXMucmVxLm9wZW4oJ0dFVCcsIHVyaSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnJlcS5zZW5kKG51bGwpO1xuICAgICAgICBpZiAodGhpcy5yZXEuc3RhdHVzID09IDIwMCB8fCB0aGlzLnJlcS5zdGF0dXMgPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsdGhpcy5yZXEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBFcnJvcignUHJvYmxlbScpLHRoaXMucmVxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCh1cmk6c3RyaW5nLCBjYjogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5yZXEub3BlbignR0VUJywgdXJpLCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVxLnNlbmQobnVsbCk7XG4gICAgICAgIGlmICh0aGlzLnJlcS5zdGF0dXMgPT0gMjAwIHx8IHRoaXMucmVxLnN0YXR1cyA9PSAwKSB7XG4gICAgICAgICAgICB2YXIgcmVzcCA9IHRoaXMucmVxLnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIHZhciBmaWVsZCA9IHJlc3AuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkYXRhXCIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPGZpZWxkLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5OnN0cmluZyA9IGZpZWxkW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwia2V5XCIpWzBdLnRleHRDb250ZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsOnN0cmluZyA9IGZpZWxkW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmFsdWVcIilbMF0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmUoa2V5LHZhbCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzMwLzE2LlxuICovXG5cbmV4cG9ydCBjbGFzcyBXb3JkSGFzaCB7XG4gICAgc3RhdGljIGhhc2god29yZDpzdHJpbmcpOnN0cmluZyB7XG4gICAgICAgIHJldHVybiB3b3JkLnRvTG93ZXJDYXNlKCkubWF0Y2goL14uezIsMTV9LylbMF07XG4gICAgfVxuXG4gICAgc3RhdGljIGQyaChkOm51bWJlcik6c3RyaW5nIHsgLy8gQ29udmVydCB0byBIRVhcbiAgICAgICAgcmV0dXJuIGQudG9TdHJpbmcoMTYpO1xuICAgIH1cblxuICAgIHN0YXRpYyBoMmQoaDpzdHJpbmcpOm51bWJlciB7IC8vIENvbnZlcnQgdG8gTnVtXG4gICAgICAgIHJldHVybiBwYXJzZUludChoLDE2KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgczJoKHM6IHN0cmluZyk6c3RyaW5nIHsgLy8gU3RyaW5nIHRvIEhFWFxuICAgICAgICB2YXIgY3I6c3RyaW5nID0gXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSBjciA9IGNyICsgdGhpcy5kMmgocy5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgcmV0dXJuIGNyO1xuICAgIH1cblxufVxuIiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGRlbGlhbiBvbiA4LzE5LzE2LlxuICovXG5cbmltcG9ydCB7VXJpTG9hZH0gZnJvbSAnLi9VcmlMb2FkJztcbmltcG9ydCB7V29yZEhhc2h9IGZyb20gJy4vV29yZEhhc2gnO1xuaW1wb3J0IHtDcnlwdG99IGZyb20gJy4vQ3J5cHRvJztcblxudmFyIG5ldCA9IG5ldyBVcmlMb2FkKCk7XG52YXIgY3J5cHRvID0gbmV3IENyeXB0bygnJywnJyk7IC8vIFRPRE86IFBhc3N3b3JkXG5cbmV4cG9ydCBjbGFzcyBTdG9yYWdlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgbG9hZEZyb21VUkkodXJpKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBnZXREYXRhKGtleTpzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlW2tleV07XG4gICAgfVxuXG4gICAgc2V0RGF0YShrZXk6c3RyaW5nLCB2YWw6c3RyaW5nKTpzdHJpbmcge1xuICAgICAgICBsb2NhbFN0b3JhZ2Vba2V5XT12YWw7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgbHN0cih4OiBzdHJpbmcsIGNiOiBGdW5jdGlvbik6Ym9vbGVhbiB7IC8vIFRPRE86IGxzdHIgbXVzdCBiZWNvbWUgd2l0aCBjYWxsYmFja1xuICAgICAgICB2YXIgbXkgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5nZXREYXRhKHgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgdmFyIGZpbGUgPSBXb3JkSGFzaC5zMmgoeCk7XG4gICAgICAgIHZhciBkaXIgPSBmaWxlLnN1YnN0cigtMywgMyk7XG4gICAgICAgIHZhciBmbiA9IFwiaW5kZXgvXCIgKyBkaXIgKyBcIi9maWxlXCIgKyBmaWxlICsgXCIudHh0XCI7XG4gICAgICAgIG5ldC5nZXQoZm4sZnVuY3Rpb24oZXJyLHJlcSkge1xuICAgICAgICAgICAgdmFyIHogPSByZXEucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgbXkuc2V0RGF0YSh4LHoucmVwbGFjZSgvXFw8eG1sXFw+LywgXCJcIikucmVwbGFjZSgvXFw8XFwveG1sXFw+LywgXCJcIikpO1xuICAgICAgICAgICAgaWYgKG15LmdldERhdGEoeCkpIHJldHVybiBjYihudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBjYihuZXcgRXJyb3IoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0ZXh0cih3OiBzdHJpbmcsIGNiOkZ1bmN0aW9uKTp2b2lkIHtcbiAgICAgICAgdmFyIGQgPSBjcnlwdG8uZGhzKHcgKyBcIi5pZHhcIik7XG4gICAgICAgIHRoaXMubHN0cihkLGZ1bmN0aW9uKGVycixkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSBjYihlcnIsW10pO1xuICAgICAgICAgICAgdmFyIHMgPSBjcnlwdG8uZGVjcnlwdCh0aGlzLmdldERhdGEoZCkpOyAvLyBUT0RPOiBTdG9yYWdlIGhhcyB0byBiZWNvbWUgYXN5bmNcbiAgICAgICAgICAgIHJldHVybiBjYihudWxsLHMuc3BsaXQoXCIsXCIpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG4iLCIvKipcbiAqIENyZWF0ZWQgYnkgZGVsaWFuIG9uIDgvMTkvMTYuXG4gKi9cblxuaW1wb3J0IHtDcnlwdG99IGZyb20gJy4vQ3J5cHRvJztcbmltcG9ydCB7U3RvcmFnZX0gZnJvbSAnLi9TdG9yYWdlJztcbmltcG9ydCB7V29yZEhhc2h9IGZyb20gJy4vV29yZEhhc2gnO1xuXG52YXIgY3J5cHQgPSBuZXcgQ3J5cHRvKCdwYXJvbGEnLCdub25jZScpOyAvL1RPRE86IHBhc3N3b3JkIHN0b3JlXG52YXIgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XG5cbmludGVyZmFjZSBJQW5kTm90IHtcbiAgICBub3Q6IGFueSxcbiAgICBhbmQ6IGFueVxufVxuXG5pbnRlcmZhY2UgSVB1c2hBIHtcbiAgICBtYXRjaDogYW55LFxuICAgIHN0cmluZzogc3RyaW5nLFxuICAgIHJlZ2V4PzogYW55XG59XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfVxuXG4gICAgY3Jvc3NzZXQodzogc3RyaW5nW10sIHM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYTogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaTpudW1iZXIgPSBzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIGlmICh3LmluZGV4T2Yoc1tpXSk+PTApIGEucHVzaChzW2ldKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgbm90Y3Jvc3NzZXQodzogc3RyaW5nW10sIHM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xuICAgICAgICBsZXQgYTogc3RyaW5nW10gPSB3O1xuICAgICAgICBmb3IgKGxldCBpOm51bWJlciA9IHMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSBpZiAoYS5pbmRleE9mKHNbaV0pPj0wKSBhLnNwbGljZShhLmluZGV4T2Yoc1tpXSksMSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGFuZE5vdCh3b3Jkczogc3RyaW5nLCBpc250OiBib29sZWFuID0gZmFsc2UpOiBJQW5kTm90IHtcblxuICAgICAgICBmdW5jdGlvbiBicmFuY2hMZW4odGV4dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHZhciB3b3Jkczogc3RyaW5nID0gdGV4dC5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpLnJlcGxhY2UoL1xccyskLywgXCJcIik7XG4gICAgICAgICAgICB2YXIgaTogbnVtYmVyO1xuICAgICAgICAgICAgdmFyIGNvdW50OiBudW1iZXI7XG5cbiAgICAgICAgICAgIGlmICh3b3Jkcy5jaGFyQXQoMCkhPScoJykgcmV0dXJuIHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChpPTEsY291bnQ9MTsgY291bnQmJmk8d29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb3VudCs9KHdvcmRzLmNoYXJBdChpKT09JygnKT8xOjA7XG4gICAgICAgICAgICAgICAgY291bnQtPSh3b3Jkcy5jaGFyQXQoaSk9PScpJyk/MTowO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtaXhvdXQoYTpJQW5kTm90LGI6SUFuZE5vdCk6SUFuZE5vdCB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGEuYW5kICE9ICdvYmplY3QnIHx8IHR5cGVvZiBhLm5vdCAhPSAnb2JqZWN0JyB8fCB0eXBlb2YgYi5hbmQgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIubm90ICE9ICdvYmplY3QnKSByZXR1cm4gYTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGIuYW5kKS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHthLmFuZFtuXT0gYi5hbmRbbl19KTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGIubm90KS5mb3JFYWNoKGZ1bmN0aW9uKG4pIHthLm5vdFtuXT0gYi5ub3Rbbl19KTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG91dDpJQW5kTm90O1xuICAgICAgICB2YXIgb3V0MjpJQW5kTm90O1xuICAgICAgICBpZiAodHlwZW9mIHdvcmRzICE9ICdzdHJpbmcnIHx8IHdvcmRzID09ICcnKSByZXR1cm4geyBhbmQ6IHt9LCBub3Q6IHt9IH07XG5cbiAgICAgICAgd29yZHMgPSB3b3Jkcy5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpLnJlcGxhY2UoL1xccyskLywgXCJcIik7XG4gICAgICAgIGlmICh3b3Jkcy5sZW5ndGg9PTApIHJldHVybiB7IGFuZDoge30sIG5vdDoge30gfTtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnV29yZHMnLHdvcmRzKTtcblxuICAgICAgICBpZiAod29yZHMuY2hhckF0KDApID09ICcoJykge1xuICAgICAgICAgICAgdmFyIGJsZW4gPSBicmFuY2hMZW4od29yZHMpO1xuICAgICAgICAgICAgdmFyIG15c2V0ID0gd29yZHMuc3Vic3RyKDAsYmxlbik7XG4gICAgICAgICAgICB2YXIgb3V0c2V0ID0gd29yZHMuc3Vic3RyKGJsZW4pO1xuICAgICAgICAgICAgbXlzZXQgPSBteXNldC5yZXBsYWNlKC9eXFwoLyxcIlwiKS5yZXBsYWNlKC9cXCkkLyxcIlwiKTtcbiAgICAgICAgICAgIG91dCA9IHRoaXMuYW5kTm90KG15c2V0KTtcbiAgICAgICAgICAgIG91dDIgPSB0aGlzLmFuZE5vdChvdXRzZXQpO1xuICAgICAgICAgICAgcmV0dXJuIG1peG91dChpc250P3sgYW5kOiBvdXQubm90LCBub3Q6IG91dC5hbmQgfTpvdXQsb3V0Mik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod29yZHMuY2hhckF0KDApID09ICctJykgeyAvLyBJbnZlcnNlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmROb3Qod29yZHMuc3Vic3RyKDEpLGlzbnQ/ZmFsc2U6dHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod29yZHMuY2hhckF0KDApID09ICcrJykgcmV0dXJuIHRoaXMuYW5kTm90KHdvcmRzLnN1YnN0cigxKSxpc250KTtcblxuICAgICAgICB2YXIgeCA9IHdvcmRzLm1hdGNoKC9eKFxcUyspKC4rKT8kLyk7XG4gICAgICAgIHZhciB5ID0ge307XG4gICAgICAgIGlmICh4PT1udWxsKSByZXR1cm4geyBhbmQ6IHt9LCBub3Q6IHt9IH07XG4gICAgICAgIHlbeFsxXV09MTtcbiAgICAgICAgcmV0dXJuIG1peG91dChpc250P3sgYW5kOiB7fSAsIG5vdDogeSB9OnsgYW5kOiB5LCBub3Q6IHt9IH0sdGhpcy5hbmROb3QoeFsyXSkpO1xuICAgIH1cblxuICAgIGNvUmVnZXhQcm9jKHdvcmRzOnN0cmluZyk6SVB1c2hBW10ge1xuICAgICAgICBpZiAodHlwZW9mIHdvcmRzICE9ICdzdHJpbmcnIHx8IHdvcmRzID09ICcnKSByZXR1cm4gW107XG4gICAgICAgIHdvcmRzID0gd29yZHMucmVwbGFjZSgvXlxccysvLCBcIlwiKS5yZXBsYWNlKC9cXHMrJC8sIFtdKTtcbiAgICAgICAgaWYgKHdvcmRzLmxlbmd0aD09MCkgcmV0dXJuIFtdO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2V4QXJyYXkod29yZHM6c3RyaW5nKTpJUHVzaEFbXSB7XG4gICAgICAgICAgICB2YXIgdzpzdHJpbmcgPSB3b3JkcztcbiAgICAgICAgICAgIHZhciBwdXNoQTpJUHVzaEFbXSA9IFtdO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzcGxpdFB1c2god29yZHM6c3RyaW5nLGludjpib29sZWFuPWZhbHNlKTp2b2lkIHtcbiAgICAgICAgICAgICAgICB3aGlsZSh3b3Jkcy5tYXRjaCgvW1xcK1xcLV0vKSkge1xuICAgICAgICAgICAgICAgICAgICB3b3JkcyA9IHdvcmRzLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghd29yZHMubWF0Y2goL15bXFwrXFwtXS8pKSB3b3JkcyA9IHdvcmRzLnJlcGxhY2UoL14oLis/KShbXFwrXFwtXSkvLGZ1bmN0aW9uKG0sYSxwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwdXNoQS5wdXNoKHsgbWF0Y2g6IGludj9cIi1cIjpcIitcIiwgc3RyaW5nOiBhIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB3b3JkcyA9IHdvcmRzLnJlcGxhY2UoL14oW1xcK1xcLV0pKFxcUyspPy8sZnVuY3Rpb24obSxwLGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hBLnB1c2goeyBtYXRjaDogKCgoaW52PzE6MCleKHAhPSctJz8xOjApKT9cIitcIjpcIi1cIiksIHN0cmluZzogYX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAod29yZHMpIHB1c2hBLnB1c2goe21hdGNoOihpbnY/XCItXCI6XCIrXCIpLCBzdHJpbmc6d29yZHN9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYnJhbmNoZXMoKSB7XG4gICAgICAgICAgICAgICAgdz13LnJlcGxhY2UoLyhbXFwrXFwtXT8pXFwoKC4rPylcXCkvZyxmdW5jdGlvbihtLHAsYSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdFB1c2goYSxwPT0nLScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJhbmNoZXMoKTtcbiAgICAgICAgICAgIHNwbGl0UHVzaCh3KTtcblxuICAgICAgICAgICAgcHVzaEEuZm9yRWFjaChmdW5jdGlvbihuKSB7bi5zdHJpbmcgPSBuLnN0cmluZy5yZXBsYWNlKC9eXFxzKy8sXCJcIikucmVwbGFjZSgvXFxzKyQvLFwiXCIpLnJlcGxhY2UoL1tcXHNcXCEtXFwvXFw6LVxcQFxcWy1cXF1cXCdcXHstfl0rL2csXCIuKlwiKTtuLnJlZ2V4ID0gbmV3IFJlZ0V4cChuLnN0cmluZyxcImlcIik7IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcHVzaEE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVnZXhBcnJheSh3b3Jkcyk7XG4gICAgfVxuXG4gICAgc2VhcmNoUnVsZShzcmNoOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIHZhciBvdXQgPSB0aGlzLmFuZE5vdChzcmNoKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMob3V0LmFuZCkubGVuZ3RoPT0wKSByZXR1cm4gW107XG4gICAgICAgIHZhciB3ID0gT2JqZWN0LmtleXMob3V0LmFuZCkuY29uY2F0KE9iamVjdC5rZXlzKG91dC5ub3QpKS5zb3J0KCh4OnN0cmluZyx5OnN0cmluZyk6bnVtYmVyPT57IHJldHVybiB4Lmxlbmd0aDw9eS5sZW5ndGg/MTowIH0pO1xuICAgICAgICB2YXIgdzEgPSBPYmplY3Qua2V5cyhvdXQuYW5kKS5zb3J0KCh4OnN0cmluZyx5OnN0cmluZyk6bnVtYmVyPT57IHJldHVybiB4Lmxlbmd0aDw9eS5sZW5ndGg/MTowIH0pO1xuXG4gICAgICAgIHcudW5zaGlmdCh3LnNwbGljZSh3LmluZGV4T2YodzFbMF0pLDEpWzBdKTsgLy8gUHV0IHRoZSBsYXJnZXN0IEFORCB3b3JkIGF0IHRoZSBmcm9udFxuXG4gICAgICAgIHZhciBteXNldCA9IHN0b3JhZ2Uuc2V0ZXh0cihXb3JkSGFzaC5oYXNoKHdbMF0pLGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpOm51bWJlciA9IDE7IGkgPCB3Lmxlbmd0aCAgJiYgKG15c2V0Lmxlbmd0aCA+PSAody5sZW5ndGgtaSkpOyBpKyspIG15c2V0ID0gKG91dC5hbmRbd1tpXV0pP2Nyb3Nzc2V0KG15c2V0LCBzZXRleHRyKG15aGFzaCh3W2ldKSkpOm5vdGNyb3Nzc2V0KG15c2V0LCBzZXRleHRyKG15aGFzaCh3W2ldKSkpO1xuXG4gICAgICAgIC8vIE5vdyB3ZSBoYXZlIGEgc2V0IHdpdGggcHJvYmFibGUgbWF0Y2hpbmcsIGxldHMgZG8gdGhlIHNlY29uZCBtYXRjaFxuXG4gICAgICAgIHZhciBvdXRzZXQgPSBbXTtcbiAgICAgICAgdmFyIHJlZ0FycmF5ID0gdGhpcy5jb1JlZ2V4UHJvYyhzcmNoKTtcblxuICAgICAgICB2YXIgZnVsbFN0cmluZ3MgPSBzcmNoLm1hdGNoKC8oW1xcK1xcLV0pP1xcXCIoLis/KVxcXCIvZyk7XG4gICAgICAgIGlmIChmdWxsU3RyaW5ncykge1xuICAgICAgICAgICAgZnVsbFN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgICAgdmFyIG86SVB1c2hBID0geyBtYXRjaDogJysnLCBzdHJpbmc6ICcnIH07XG4gICAgICAgICAgICAgICAgaWYgKG4ubWF0Y2goL15cXC0vKSkgby5tYXRjaCA9ICctJztcbiAgICAgICAgICAgICAgICBvLnN0cmluZyA9IG4ucmVwbGFjZSgvXltcXCtcXC1dP1xcXCIvLFwiXCIpLnJlcGxhY2UoL1xcXCIkLyxcIlwiKS5yZXBsYWNlKC9bXFxzXFwhLVxcL1xcOi1cXEBcXFstXFxdXFwnXFx7LX5dKy9nLFwiW1xcXFxzXFxcXCEtXFxcXC9cXFxcOi1cXFxcQFxcXFxbLVxcXFxdXFxcXCdcXFxcey1+XSpcIik7XG4gICAgICAgICAgICAgICAgby5yZWdleCA9IG5ldyBSZWdFeHAoby5zdHJpbmcsXCJpXCIpO1xuICAgICAgICAgICAgICAgIHJlZ0FycmF5LnVuc2hpZnQobyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbXlzZXQuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICB2YXIgcyA9IHRyZChuK1wiLmRhdGFcIik7XG5cbiAgICAgICAgICAgIC8vIFN0aW5ncyBtYXRjaFxuXG5cbiAgICAgICAgICAgIGZvciAodmFyIGk9MDtpPHJlZ0FycmF5Lmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHJlZ0FycmF5W2ldLnJlZ2V4LnRlc3Qocyk7XG4gICAgICAgICAgICAgICAgaWYgKHQgJiYgcmVnQXJyYXlbaV0ubWF0Y2ggPT0gJy0nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCghdCkgJiYgcmVnQXJyYXlbaV0ubWF0Y2ggPT0gJysnKSByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdXRzZXQucHVzaChuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG91dHNldDtcbiAgICB9XG5cblxufSIsIi8qKlxuICogQ3JlYXRlZCBieSBkZWxpYW4gb24gOC8xOC8xNi5cbiAqL1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

/**
 * Created by delian on 8/30/16.
 */
"use strict";
/*
 * This little module should implement Base64 encoding/decoding with auto detect between nodejs and browser
 */
// <reference path="./typings/index.d.ts" />
var B2A = function (b) {
    return new Buffer(b).toString('base64');
};
if (typeof btoa == 'function')
    B2A = btoa;
var A2B = function (a) {
    return new Buffer(a, 'base64').toString('ascii');
};
if (typeof atob == 'function')
    A2B = atob;
var Base64 = (function () {
    function Base64() {
    }
    Base64.btoa = function (b) {
        return B2A(b);
    };
    Base64.atob = function (a) {
        return A2B(a);
    };
    return Base64;
}());
exports.Base64 = Base64;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var config = require('./config.json');
var Config = (function () {
    function Config() {
    }
    Config.get = function (key) {
        return config[key];
    };
    return Config;
}());
exports.Config = Config;

/**
 * Created by delian on 8/19/16.
 */
/// <reference path="./typings/index.d.ts" />
"use strict";
var gPassword = null;
var gNonce = null;
// TODO: To implement the Nonce
var Crypto = (function () {
    function Crypto(password, nonce) {
        gPassword = password;
    }
    Crypto.prototype.decrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.decrypt(data, password).toString();
    };
    Crypto.prototype.encrypt = function (data, password, nonce) {
        if (password === void 0) { password = gPassword; }
        if (nonce === void 0) { nonce = gNonce; }
        return CryptoJS.AES.encrypt(data, password).toString();
    };
    Crypto.prototype.setPassword = function (password) {
        gPassword = password;
    };
    Crypto.prototype.setNonce = function (nonce) {
        gNonce = nonce;
    };
    Crypto.prototype.dhs = function (word) {
        return this.encrypt(word);
    };
    return Crypto;
}());
exports.Crypto = Crypto;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var UriLoad = (function () {
    function UriLoad() {
        this.req = null;
        this.req = new XMLHttpRequest();
    }
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            return cb(null, this.req);
        }
        else {
            return cb(new Error('Problem'), this.req);
        }
    };
    UriLoad.prototype.get = function (uri, cb) {
        this.req.open('GET', uri, false);
        this.req.send(null);
        if (this.req.status == 200 || this.req.status == 0) {
            var resp = this.req.responseXML.documentElement;
            var field = resp.getElementsByTagName("data");
            for (var i = 0; i < field.length; i++) {
                try {
                    var key = field[i].getElementsByTagName("key")[0].textContent;
                    var val = field[i].getElementsByTagName("value")[0].textContent;
                    this.store(key, val);
                }
                catch (e) {
                }
            }
        }
    };
    return UriLoad;
}());
exports.UriLoad = UriLoad;

/**
 * Created by delian on 8/30/16.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Crypto_1 = require('./Crypto');
var WordHash = (function (_super) {
    __extends(WordHash, _super);
    function WordHash() {
        _super.apply(this, arguments);
    }
    WordHash.prototype.hash = function (word) {
        return word.toLowerCase().match(/^.{2,15}/)[0];
    };
    WordHash.prototype.d2h = function (d) {
        return d.toString(16);
    };
    WordHash.prototype.h2d = function (h) {
        return parseInt(h, 16);
    };
    WordHash.prototype.s2h = function (s) {
        var cr = "";
        for (var i = 0; i < s.length; i++)
            cr = cr + this.d2h(s.charCodeAt(i));
        return cr;
    };
    return WordHash;
}(Crypto_1.Crypto));
exports.WordHash = WordHash;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var UriLoad_1 = require('./UriLoad');
var WordHash_1 = require('./WordHash');
var net = new UriLoad_1.UriLoad();
var wh = new WordHash_1.WordHash('', ''); // TODO: Password storage should be implemented
var Storage = (function () {
    function Storage() {
    }
    Storage.prototype.clear = function () {
        localStorage.clear();
    };
    Storage.prototype.loadFromURI = function (uri) {
        this.clear();
    };
    Storage.prototype.getData = function (key) {
        return localStorage[key];
    };
    Storage.prototype.setData = function (key, val) {
        localStorage[key] = val;
        return val;
    };
    Storage.prototype.lstr = function (x, cb) {
        var my = this;
        if (this.getData(x))
            return true;
        var file = wh.s2h(x);
        var dir = file.substr(-3, 3);
        var fn = "index/" + dir + "/file" + file + ".txt";
        net.get(fn, function (err, req) {
            var z = req.responseText;
            my.setData(x, z.replace(/\<xml\>/, "").replace(/\<\/xml\>/, ""));
            if (my.getData(x))
                return cb(null);
            return cb(new Error());
        });
        return false;
    };
    return Storage;
}());
exports.Storage = Storage;

/**
 * Created by delian on 8/19/16.
 */
"use strict";
var Crypto_1 = require('./Crypto');
var crypt = new Crypto_1.Crypto('parola', 'nonce'); //TODO: password store
var Search = (function () {
    function Search() {
    }
    Search.prototype.setextr = function (w) {
        var d = dhs(w + ".idx");
        if (lstr(d)) {
            var s = Aes.Ctr.decrypt(localStorage[d], pass2, 256);
            return s.split(",");
        }
        else
            return [];
    };
    Search.prototype.crossset = function (w, s) {
        var a = [];
        for (var i = s.length - 1; i >= 0; i--)
            if (w.indexOf(s[i]) >= 0)
                a.push(s[i]);
        return a;
    };
    Search.prototype.notcrossset = function (w, s) {
        var a = w;
        for (var i = s.length - 1; i >= 0; i--)
            if (a.indexOf(s[i]) >= 0)
                a.splice(a.indexOf(s[i]), 1);
        return a;
    };
    Search.prototype.andNot = function (words, isnt) {
        if (isnt === void 0) { isnt = false; }
        function branchLen(text) {
            var words = text.replace(/^\s+/, "").replace(/\s+$/, "");
            var i;
            var count;
            if (words.charAt(0) != '(')
                return text.length;
            for (i = 1, count = 1; count && i < words.length; i++) {
                count += (words.charAt(i) == '(') ? 1 : 0;
                count -= (words.charAt(i) == ')') ? 1 : 0;
            }
            return i;
        }
        function mixout(a, b) {
            if (typeof a != 'object' || typeof b != 'object' || typeof a.and != 'object' || typeof a.not != 'object' || typeof b.and != 'object' || typeof b.not != 'object')
                return a;
            Object.keys(b.and).forEach(function (n) { a.and[n] = b.and[n]; });
            Object.keys(b.not).forEach(function (n) { a.not[n] = b.not[n]; });
            return a;
        }
        var out;
        var out2;
        if (typeof words != 'string' || words == '')
            return { and: {}, not: {} };
        words = words.replace(/^\s+/, "").replace(/\s+$/, "");
        if (words.length == 0)
            return { and: {}, not: {} };
        //console.log('Words',words);
        if (words.charAt(0) == '(') {
            var blen = branchLen(words);
            var myset = words.substr(0, blen);
            var outset = words.substr(blen);
            myset = myset.replace(/^\(/, "").replace(/\)$/, "");
            out = this.andNot(myset);
            out2 = this.andNot(outset);
            return mixout(isnt ? { and: out.not, not: out.and } : out, out2);
        }
        if (words.charAt(0) == '-') {
            return this.andNot(words.substr(1), isnt ? false : true);
        }
        if (words.charAt(0) == '+')
            return this.andNot(words.substr(1), isnt);
        var x = words.match(/^(\S+)(.+)?$/);
        var y = {};
        if (x == null)
            return { and: {}, not: {} };
        y[x[1]] = 1;
        return mixout(isnt ? { and: {}, not: y } : { and: y, not: {} }, this.andNot(x[2]));
    };
    Search.prototype.coRegexProc = function (words) {
        if (typeof words != 'string' || words == '')
            return [];
        words = words.replace(/^\s+/, "").replace(/\s+$/, []);
        if (words.length == 0)
            return [];
        function regexArray(words) {
            var w = words;
            var pushA = [];
            function splitPush(words, inv) {
                if (inv === void 0) { inv = false; }
                while (words.match(/[\+\-]/)) {
                    words = words.replace(/^\s+/, "").replace(/\s+$/, "");
                    if (!words.match(/^[\+\-]/))
                        words = words.replace(/^(.+?)([\+\-])/, function (m, a, p) {
                            pushA.push({ match: inv ? "-" : "+", string: a });
                            return p;
                        });
                    words = words.replace(/^([\+\-])(\S+)?/, function (m, p, a) {
                        pushA.push({ match: (((inv ? 1 : 0) ^ (p != '-' ? 1 : 0)) ? "+" : "-"), string: a });
                        return "";
                    });
                }
                if (words)
                    pushA.push({ match: (inv ? "-" : "+"), string: words });
            }
            function branches() {
                w = w.replace(/([\+\-]?)\((.+?)\)/g, function (m, p, a) {
                    splitPush(a, p == '-');
                    return "";
                });
            }
            branches();
            splitPush(w);
            pushA.forEach(function (n) { n.string = n.string.replace(/^\s+/, "").replace(/\s+$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, ".*"); n.regex = new RegExp(n.string, "i"); });
            return pushA;
        }
        return regexArray(words);
    };
    Search.prototype.searchRule = function (srch) {
        var out = this.andNot(srch);
        if (Object.keys(out.and).length == 0)
            return [];
        var w = Object.keys(out.and).concat(Object.keys(out.not)).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        var w1 = Object.keys(out.and).sort(function (x, y) { return x.length <= y.length ? 1 : 0; });
        w.unshift(w.splice(w.indexOf(w1[0]), 1)[0]); // Put the largest AND word at the front
        var myset = setextr(myhash(w[0]));
        for (var i = 1; i < w.length && (myset.length >= (w.length - i)); i++)
            myset = (out.and[w[i]]) ? crossset(myset, setextr(myhash(w[i]))) : notcrossset(myset, setextr(myhash(w[i])));
        // Now we have a set with probable matching, lets do the second match
        var outset = [];
        var regArray = this.coRegexProc(srch);
        var fullStrings = srch.match(/([\+\-])?\"(.+?)\"/g);
        if (fullStrings) {
            fullStrings.forEach(function (n) {
                var o = { match: '+', string: '' };
                if (n.match(/^\-/))
                    o.match = '-';
                o.string = n.replace(/^[\+\-]?\"/, "").replace(/\"$/, "").replace(/[\s\!-\/\:-\@\[-\]\'\{-~]+/g, "[\\s\\!-\\/\\:-\\@\\[-\\]\\'\\{-~]*");
                o.regex = new RegExp(o.string, "i");
                regArray.unshift(o);
            });
        }
        myset.forEach(function (n) {
            var s = trd(n + ".data");
            // Stings match
            for (var i = 0; i < regArray.length; i++) {
                var t = regArray[i].regex.test(s);
                if (t && regArray[i].match == '-')
                    return;
                if ((!t) && regArray[i].match == '+')
                    return;
            }
            outset.push(n);
        });
        return outset;
    };
    return Search;
}());
exports.Search = Search;

/**
 * Created by delian on 8/18/16.
 */

//# sourceMappingURL=data:application/json;base64,
